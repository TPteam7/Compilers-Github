
//#include <stdio.h> // Required for console output functions

// Global variables
int globalInt;     // Global integer
//char globalChar;   // Global character
//float globalFloat; // Global floating-point variable
int boolFlag;      // Boolean (0 or 1)

// Function to print an integer
void printInt(int value) {
    print(value); // Print the integer followed by a newline
}

// Function to print a character
//void printChar(char value) {
    //write value; // Print the character followed by a newline
//}

// Function to print a floating-point number
//void printFloat(float value) {
    //printf value; // Print the float to two decimal places followed by a newline
//}

// Function to compute the sum of two integers with additional logic
int computeSum(int a, int b) {
    int sum;
    int doubleSum;
    int temp;

    sum = a + b;  // Compute sum
    temp = sum + 5;  // Add constant
    doubleSum = temp * 2;  // Double the sum
    globalFloat = globalFloat + sum;  // Update global float

    if (doubleSum > 50) {
        globalInt = globalInt + 10;  // Update global variable
        print(1);
        //printChar('H');  // Print message
    } else {
        globalInt = globalInt - 5;  // Alternative update
        print(0);
        //printChar('L');
    }

    printInt(doubleSum); // Output the result
    return doubleSum;
}

// Function to display results with additional logic
void displayResult(int result) {
    int localCopy;

    // Copy result to local variable and perform operations
    localCopy = result;
    localCopy = localCopy + 1;

    if (localCopy / 2 == 0) {
        print(1);
        //globalChar = 'E';  // Assign global character
    } else {
        print(0);
        //globalChar = 'O';  // Alternate assignment
    }

    // Print global character
    //printChar(globalChar);

    // Assign localCopy to global variable
    globalInt = localCopy;

    // Mock display operation
    localCopy = localCopy * 3;
    printInt(localCopy); // Print modified result
}

// Function to multiply two integers with added complexity
int multiply(int x, int y) {
    int product;
    int square;
    int tempResult;

    product = x * y;  // Compute product
    square = x * x;   // Compute square of x
    tempResult = product + square;  // Combine results

    if (tempResult > 50) {
        globalFloat = globalFloat / 2.0;  // Adjust global float
        print(globalFloat);
        //printFloat(globalFloat);  // Print global float
    }

    printInt(tempResult); // Print multiplication result
    return tempResult;
}

// Function to calculate the factorial of a number
int factorial(int n) {
    int result;

    if (n <= 1) {
        printInt(1);  // Print base case result
        return 1;
    } else {
        int factorialRes;
        factorialRes = factorial(n - 1);
        result = n * factorialRes;  // Recursive call
        printInt(result); // Print intermediate factorial value
        return result;
    }
}

// Function to check if a number is prime
int isPrime(int n) {
    int i;

    if (n <= 1) {
        return 0;
    }

    i = 2;
    while(i < n) {
        int check = n / i;
        if (check == 0) {
            print(1);
            //printChar('N');  // Print non-prime indicator
            return 0;  // Divisible, not prime
        }
        i = i + 1;
    }

    //printChar('P');  // Print prime indicator
    print(0);
    return 1;  // Prime
}

// Main function (moved to the end)
void main() {
    int localInt;     // Local integer
    //float localFloat; // Local float
    int i;            // Loop counter
    int result;       // Result variable
    int temp;         // Temporary variable for operations

    // Variable initialization
    localInt = 15;
    //localFloat = 3.7;
    globalInt = 20;
    globalChar = 'C';

    // Print initial global values
    printInt(globalInt);
    //printChar(globalChar);
    //printFloat(globalFloat);

    // Complex arithmetic expression
    result = (localInt * 2 + 3) / (5 - 2) + globalInt;

    // If statement
    if (result > 10) {
        temp = result * 2;  // Additional computation
        displayResult(temp);
    } else {
        temp = result - 1;
        displayResult(temp + 3);
    }

    // While loop with nested logic
    i = 0;
    while (i < 10) {
        result = multiply(i, i + 1);  // Function call inside loop

        // If inside while
        if (result > 20) {
            globalInt = result;  // Update global variable
            break;  // Exit loop
        } else {
            globalInt = globalInt + 1;  // Increment global variable
        }

        printInt(i); // Print loop counter
        i = i + 1;
    }

    // Call factorial function
    result = factorial(5);
    printInt(result); // Print final factorial result

    // Check for primality
    if (isPrime(result)) {
        displayResult(result);
    } else {
        displayResult(result - 10);
    }

    // Additional redundant computation for optimization analysis
    temp = 5 * 4; // Constant folding opportunity
    result = temp + 10;
    printInt(result); // Print final redundant computation

    // Final function call
    result = computeSum(localInt, 20);
    displayResult(result);
}

    